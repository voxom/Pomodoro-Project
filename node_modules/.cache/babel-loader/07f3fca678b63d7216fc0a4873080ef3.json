{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crhar\\\\Documents\\\\Thinkful\\\\Pomodoro-Project\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Display.jsx\";\nimport React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\nimport useInterval from '../utils/useInterval';\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === 'Focusing') {\n      return {\n        label: 'On Break',\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: 'Focusing',\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nexport default function Display({\n  isTimerRunning,\n  activeState,\n  session,\n  setSession\n}) {\n  let {\n    focusDuration,\n    breakDuration,\n    sessionActive\n  } = activeState;\n  let {\n    label,\n    timeRemaining\n  } = session;\n  const progress = 100 * (1 - timeRemaining / (label === 'Focusing' ? focusDuration * 60 : breakDuration * 60));\n  useInterval(() => {\n    if (timeRemaining === 0) {\n      new Audio('https://bigsoundbank.com/UPLOAD/mp3/1482.mp3').play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, sessionActive && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, label, \" for\", ' ', label === 'Focusing' ? minutesToDuration(focusDuration) : minutesToDuration(breakDuration), ' ', \"minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, secondsToDuration(timeRemaining), \" remaining\"), !isTimerRunning && /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 35\n    }\n  }, \"Paused\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progress,\n    style: {\n      width: `${progress}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/crhar/Documents/Thinkful/Pomodoro-Project/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.jsx"],"names":["React","minutesToDuration","secondsToDuration","useInterval","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Display","isTimerRunning","activeState","session","setSession","sessionActive","progress","Audio","play","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,CAACC,aAAV,GAA0B,CAAtC,CAAtB;AACA,SAAO,EACL,GAAGD,SADE;AAELC,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,aAArB,EAAoCC,aAApC,EAAmD;AACjD;AACF;AACA;AACE,SAAQC,cAAD,IAAoB;AACzB,QAAIA,cAAc,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvC,aAAO;AACLA,QAAAA,KAAK,EAAE,UADF;AAELP,QAAAA,aAAa,EAAEK,aAAa,GAAG;AAF1B,OAAP;AAID;;AACD,WAAO;AACLE,MAAAA,KAAK,EAAE,UADF;AAELP,MAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,KAAP;AAID,GAXD;AAYD;;AAED,eAAe,SAASI,OAAT,CAAiB;AAC9BC,EAAAA,cAD8B;AAE9BC,EAAAA,WAF8B;AAG9BC,EAAAA,OAH8B;AAI9BC,EAAAA;AAJ8B,CAAjB,EAKZ;AACD,MAAI;AAAER,IAAAA,aAAF;AACEC,IAAAA,aADF;AAEEQ,IAAAA;AAFF,MAEqBH,WAFzB;AAGA,MAAI;AAAEH,IAAAA,KAAF;AAASP,IAAAA;AAAT,MAA2BW,OAA/B;AACA,QAAMG,QAAQ,GACZ,OACC,IACCd,aAAa,IACVO,KAAK,KAAK,UAAV,GACGH,aAAa,GAAG,EADnB,GAEGC,aAAa,GAAG,EAHT,CAFf,CADF;AAOAR,EAAAA,WAAW,CACT,MAAM;AACJ,QAAIG,aAAa,KAAK,CAAtB,EAAyB;AACvB,UAAIe,KAAJ,CAAU,8CAAV,EAA0DC,IAA1D;AACA,aAAOJ,UAAU,CACfT,WAAW,CAACC,aAAD,EAAgBC,aAAhB,CADI,CAAjB;AAGD;;AACD,WAAOO,UAAU,CAACd,QAAD,CAAjB;AACD,GATQ,EAUTW,cAAc,GAAG,IAAH,GAAU,IAVf,CAAX;AAYA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,aAAa,iBACZ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KADH,UACc,GADd,EAEGA,KAAK,KAAK,UAAV,GACGZ,iBAAiB,CAACS,aAAD,CADpB,GAEGT,iBAAiB,CAACU,aAAD,CAJvB,EAIwC,GAJxC,YADF,eASE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,iBAAiB,CAACI,aAAD,CADpB,eATF,EAYG,CAACS,cAAD,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZtB,CADF,CADF,eAiBE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEQ,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeH,QALjB;AAME,IAAA,KAAK,EAAE;AAAEI,MAAAA,KAAK,EAAG,GAAEJ,QAAS;AAArB,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAjBF,CAFJ,CADF;AAsCD","sourcesContent":["import React from 'react'\nimport { minutesToDuration, secondsToDuration } from '../utils/duration'\nimport useInterval from '../utils/useInterval'\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1)\n  return {\n    ...prevState,\n    timeRemaining,\n  }\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === 'Focusing') {\n      return {\n        label: 'On Break',\n        timeRemaining: breakDuration * 60,\n      }\n    }\n    return {\n      label: 'Focusing',\n      timeRemaining: focusDuration * 60,\n    }\n  }\n}\n\nexport default function Display({\n  isTimerRunning,\n  activeState,\n  session,\n  setSession,\n}) {\n  let { focusDuration,\n        breakDuration,\n        sessionActive, } = activeState\n  let { label, timeRemaining } = session\n  const progress =\n    100 *\n    (1 -\n      timeRemaining /\n        (label === 'Focusing'\n          ? focusDuration * 60\n          : breakDuration * 60))\n  useInterval(\n    () => {\n      if (timeRemaining === 0) {\n        new Audio('https://bigsoundbank.com/UPLOAD/mp3/1482.mp3').play()\n        return setSession(\n          nextSession(focusDuration, breakDuration),\n        )\n      }\n      return setSession(nextTick)\n    },\n    isTimerRunning ? 1000 : null,\n  )\n  return (\n    <div>\n      {sessionActive && (\n        <React.Fragment>\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <h2 data-testid=\"session-title\">\n                {label} for{' '}\n                {label === 'Focusing'\n                  ? minutesToDuration(focusDuration)\n                  : minutesToDuration(breakDuration)}{' '}\n                minutes\n              </h2>\n\n              <p className=\"lead\" data-testid=\"session-sub-title\">\n                {secondsToDuration(timeRemaining)} remaining\n              </p>\n              {!isTimerRunning && <h2>Paused</h2>}\n            </div>\n          </div>\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <div className=\"progress\" style={{ height: '20px' }}>\n                <div\n                  className=\"progress-bar\"\n                  role=\"progressbar\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  aria-valuenow={progress}\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}