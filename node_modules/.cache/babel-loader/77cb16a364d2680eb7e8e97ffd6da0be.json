{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\crhar\\\\Documents\\\\Thinkful\\\\Pomodoro-Project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import React from'react';import{minutesToDuration,secondsToDuration}from'../utils/duration';import useInterval from'../utils/useInterval';/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */function nextTick(prevState){var timeRemaining=Math.max(0,prevState.timeRemaining-1);return _objectSpread(_objectSpread({},prevState),{},{timeRemaining:timeRemaining});}/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */function nextSession(focusDuration,breakDuration){/**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */return function(currentSession){if(currentSession.label==='Focusing'){return{label:'On Break',timeRemaining:breakDuration*60};}return{label:'Focusing',timeRemaining:focusDuration*60};};}export default function DisplayDuration(_ref){var isTimerRunning=_ref.isTimerRunning,activeState=_ref.activeState,session=_ref.session,setSession=_ref.setSession;var focusDuration=activeState.focusDuration,breakDuration=activeState.breakDuration,sessionActive=activeState.sessionActive;var label=session.label,timeRemaining=session.timeRemaining;var progress=100*(1-timeRemaining/(label==='Focusing'?focusDuration*60:breakDuration*60));useInterval(function(){if(timeRemaining===0){new Audio('https://bigsoundbank.com/UPLOAD/mp3/1111.mp3').play();return setSession(nextSession(focusDuration,breakDuration));}return setSession(nextTick);},isTimerRunning?1000:null);return/*#__PURE__*/React.createElement(\"div\",null,sessionActive&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"h2\",{\"data-testid\":\"session-title\"},label,\" for\",' ',label==='Focusing'?minutesToDuration(focusDuration):minutesToDuration(breakDuration),' ',\"minutes\"),/*#__PURE__*/React.createElement(\"p\",{className:\"lead\",\"data-testid\":\"session-sub-title\"},secondsToDuration(timeRemaining),\" remaining\"),!isTimerRunning&&/*#__PURE__*/React.createElement(\"h2\",null,\"Paused\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"row mb-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"progress\",style:{height:'20px'}},/*#__PURE__*/React.createElement(\"div\",{className:\"progress-bar\",role:\"progressbar\",\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\",\"aria-valuenow\":progress,style:{width:\"\".concat(progress,\"%\")}}))))));}","map":{"version":3,"sources":["C:/Users/crhar/Documents/Thinkful/Pomodoro-Project/src/pomodoro/DisplayDuration.jsx"],"names":["React","minutesToDuration","secondsToDuration","useInterval","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","DisplayDuration","isTimerRunning","activeState","session","setSession","sessionActive","progress","Audio","play","height","width"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { minutesToDuration, secondsToDuration } from '../utils/duration'\nimport useInterval from '../utils/useInterval'\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1)\n  return {\n    ...prevState,\n    timeRemaining,\n  }\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === 'Focusing') {\n      return {\n        label: 'On Break',\n        timeRemaining: breakDuration * 60,\n      }\n    }\n    return {\n      label: 'Focusing',\n      timeRemaining: focusDuration * 60,\n    }\n  }\n}\n\nexport default function DisplayDuration({\n  isTimerRunning,\n  activeState,\n  session,\n  setSession,\n}) {\n  let { focusDuration,\n        breakDuration,\n        sessionActive, } = activeState\n  let { label, timeRemaining } = session\n  const progress =\n    100 *\n    (1 -\n      timeRemaining /\n        (label === 'Focusing'\n          ? focusDuration * 60\n          : breakDuration * 60))\n  useInterval(\n    () => {\n      if (timeRemaining === 0) {\n        new Audio('https://bigsoundbank.com/UPLOAD/mp3/1111.mp3').play()\n        return setSession(\n          nextSession(focusDuration, breakDuration),\n        )\n      }\n      return setSession(nextTick)\n    },\n    isTimerRunning ? 1000 : null,\n  )\n  return (\n    <div>\n      {sessionActive && (\n        <React.Fragment>\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <h2 data-testid=\"session-title\">\n                {label} for{' '}\n                {label === 'Focusing'\n                  ? minutesToDuration(focusDuration)\n                  : minutesToDuration(breakDuration)}{' '}\n                minutes\n              </h2>\n\n              <p className=\"lead\" data-testid=\"session-sub-title\">\n                {secondsToDuration(timeRemaining)} remaining\n              </p>\n              {!isTimerRunning && <h2>Paused</h2>}\n            </div>\n          </div>\n          <div className=\"row mb-2\">\n            <div className=\"col\">\n              <div className=\"progress\" style={{ height: '20px' }}>\n                <div\n                  className=\"progress-bar\"\n                  role=\"progressbar\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  aria-valuenow={progress}\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}